{"version":3,"sources":["pages/header/haderBar.js","pages/specificCountry/specificCountry.js","services/appServiceApi.js","countryList.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBar","props","className","Navbar","bg","variant","Brand","href","Nav","stateprv","labels","datasets","fill","backgroundColor","borderColor","borderWidth","lineTension","data","SpecificCountry","useState","state","setState","useEffect","countrytDtls","labelC","dataC","dataD","dataR","Object","keys","forEach","key","push","confirmed","deaths","recovered","label","type","Card","style","Header","as","country3code","Body","latestDtls","Title","Text","Intl","NumberFormat","format","options","title","display","text","fontSize","legend","position","AppServiceApi","getSpecifiedCountryLatestDetails","countryCode","today","Date","setDate","getDate","date","getFullYear","getMonth","endpoint","axios","getSpecifiedCountryDetails","getGlobalDetails","getGlobalDetailsAll","getCountryList","CountryList","regExPattern","RegExp","_","escapeRegExp","country3CodeSearch","filter","countryListWithAlpha","obj","test","name","alpha3Code","map","rec","onClick","onSelect","bind","getContlyList","App","setCountry3code","setCountry3CodeSearch","setLatestDtls","gloabalDtls","setGlobalDtls","gloabalDtlsAll","setGlobalDtlsAll","setCountrytDtls","setCountryListWithAlpha","then","res","result","class","FormControl","sizetype","value","placeholder","onChange","e","target","length","code","countryName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.55923a88.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst HeaderBar = (props) => {\r\n\r\n    const onChangeOfCountryCode = (e) => {\r\n        if(e.target.value.length <= 3) {\r\n            props.setCountry3code(e.target.value.toUpperCase());\r\n        } else if(e.target.value.length === 0) {\r\n            props.setCountry3code(e.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"header-bar\">\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <span className=\"app-icon\"></span>\r\n                <Navbar.Brand href=\"#home\">Covid19 Update</Navbar.Brand>\r\n                <Nav className=\"mr-auto\"></Nav>\r\n                {/* <Form inline>\r\n                <FormControl sizetype=\"text\" value={props.country3code} placeholder=\"Country Code\" className=\"mr-sm-2\" onChange={onChangeOfCountryCode}/>\r\n                </Form> */}\r\n            </Navbar>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default HeaderBar;","import React, {useEffect, useState} from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nconst stateprv = {\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        fill: true,\r\n        backgroundColor: '#9C27B0',\r\n        borderColor: '#9C27B0',\r\n        borderWidth: 1,\r\n        lineTension: 0.5,\r\n        data: []\r\n      }\r\n    ]\r\n  }\r\n\r\nconst SpecificCountry = (props) => {\r\n    const [state, setState] = useState(stateprv);\r\n\r\n    useEffect(() => {\r\n        if(props.countrytDtls) {\r\n            let labelC = [];\r\n            let dataC = [];\r\n            let dataD = [];\r\n            let dataR = [];\r\n\r\n            Object.keys(props.countrytDtls).forEach((key) => {\r\n                labelC.push(key);\r\n                dataC.push(props.countrytDtls[key].confirmed);\r\n                dataD.push(props.countrytDtls[key].deaths);\r\n                dataR.push(props.countrytDtls[key].recovered);\r\n            })\r\n\r\n            setState({\r\n                labels: labelC,\r\n                datasets : [\r\n                    {\r\n                        label: 'Confirmed',\r\n                        type: 'line',\r\n                        fill: true,\r\n                        data: dataC,\r\n                        borderColor: '#ffc107',\r\n                    },\r\n                    {\r\n                        label: 'Recovered',\r\n                        type: 'bar',\r\n                        fill: true,\r\n                        data: dataR,\r\n                        backgroundColor: 'green'\r\n                    },\r\n                    {\r\n                        label: 'Death',\r\n                        type: 'line',\r\n                        fill: true,\r\n                        data: dataD,\r\n                        borderColor: 'red',\r\n                    }\r\n                ]\r\n            });\r\n\r\n        }\r\n    }, [props.countrytDtls])\r\n\r\n    return (\r\n        <div className=\"specific-country\">\r\n            <Card style={{\"margin-bottom\": \"5px\"}}>\r\n                <Card.Header as=\"h5\">{props.country3code}'s Count</Card.Header>\r\n                <Card.Body>\r\n                {props.latestDtls ? \r\n                    <div className=\"row\">\r\n                        <div className=\"col-6\">\r\n                            <div className=\"row\">\r\n                                <div className=\"col-6\">\r\n                                    <Card  className=\"box-shadow\">\r\n                                        <Card.Body>\r\n                                            <Card.Title>Confirmed</Card.Title>\r\n                                            <Card.Text className=\"count confirmed\">{new Intl.NumberFormat('en-IN').format(props.latestDtls.confirmed)}</Card.Text>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </div>\r\n                                <div className=\"col-6\">\r\n                                    <Card  className=\"box-shadow\">\r\n                                        <Card.Body>\r\n                                                <Card.Title>Death</Card.Title>\r\n                                                <Card.Text className=\"count death\">{new Intl.NumberFormat('en-IN').format(props.latestDtls.deaths)}</Card.Text>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                </div>\r\n                            </div>\r\n                            <div className=\"row padding-top-30\">\r\n                                    <div className=\"col-6\">\r\n                                        <Card  className=\"box-shadow\">\r\n                                            <Card.Body>\r\n                                                <Card.Title>Recovered</Card.Title>\r\n                                                <Card.Text className=\"count recover\">{new Intl.NumberFormat('en-IN').format(props.latestDtls.recovered)}</Card.Text>\r\n                                            </Card.Body>\r\n                                        </Card>\r\n                                    </div>\r\n                                    <div className=\"col-6\">\r\n                                    <Card  className=\"box-shadow\">\r\n                                        <Card.Body>\r\n                                            <Card.Title>Active</Card.Title>\r\n                                            <Card.Text className=\"count active\">{new Intl.NumberFormat('en-IN').format(+props.latestDtls.confirmed - props.latestDtls.deaths - props.latestDtls.recovered)}</Card.Text>\r\n                                        </Card.Body>\r\n                                    </Card>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-6\">\r\n                            <div className=\"row col-12\">\r\n                            <Line\r\n                                data={state}\r\n                                options={{\r\n                                    title:{\r\n                                    display:true,\r\n                                    text:'Average Rainfall per month',\r\n                                    fontSize:20\r\n                                    },\r\n                                    legend:{\r\n                                    display:true,\r\n                                    position:'top'\r\n                                    }\r\n                                }}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                     </div>\r\n                    : null }\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpecificCountry;","import axios from 'axios';\r\n\r\nvar AppServiceApi = {\r\n\r\n    getSpecifiedCountryLatestDetails: (countryCode) => {\r\n        let today = new Date();\r\n        today.setDate(today.getDate() - 1);\r\n        let date = `${today.getFullYear()}-0${today.getMonth() + 1}-${today.getDate()}`;\r\n        let endpoint = `https://covidapi.info/api/v1/country/${countryCode}/${date}`\r\n        return axios(endpoint)\r\n    },\r\n\r\n    getSpecifiedCountryDetails: (countryCode) => {\r\n        let endpoint = `https://covidapi.info/api/v1/country/${countryCode}`\r\n        return axios(endpoint)\r\n    },\r\n\r\n    getGlobalDetails: (countryCode) => {\r\n        let endpoint = `https://covidapi.info/api/v1/global`\r\n        return axios(endpoint)\r\n    },\r\n\r\n    getGlobalDetailsAll: (countryCode) => {\r\n        let endpoint = `https://covidapi.info/api/v1/global/count`\r\n        return axios(endpoint)\r\n    },\r\n\r\n    getCountryList: () => {\r\n        let endpoint = `https://restcountries.eu/rest/v2/all`\r\n        return axios(endpoint)\r\n    },\r\n};\r\n\r\nexport default AppServiceApi;","import React from 'react';\r\nimport _ from 'lodash';\r\n\r\n\r\n\r\nconst CountryList = (props) => {\r\n\r\n    const getContlyList = () => {\r\n        let regExPattern = new RegExp(_.escapeRegExp(props.country3CodeSearch), 'i');\r\n        let filterData = _.filter(props.countryListWithAlpha, (obj)=> {\r\n            return (regExPattern.test(obj.name) || regExPattern.test(obj.alpha3Code)); \r\n        })\r\n        return filterData.map((rec) => {\r\n          return(\r\n          <span onClick={props.onSelect.bind(this, rec.alpha3Code, rec.name)}>{rec.name} ({rec.alpha3Code})</span>\r\n          )\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"country-list\">\r\n            {getContlyList()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountryList;","import React, { useState, useEffect } from 'react';\r\nimport './App.scss';\r\nimport HeaderBar from './pages/header/haderBar';\r\nimport SpecificCountry from './pages/specificCountry/specificCountry';\r\nimport AppServiceApi from './services/appServiceApi';\r\nimport FormControl from 'react-bootstrap/FormControl'\r\nimport CountryList from './countryList'\r\n\r\nconst App = (props) => {\r\n  const [country3code, setCountry3code] = useState(\"IND\");\r\n  const [country3CodeSearch, setCountry3CodeSearch] = useState(\"United States of America\");\r\n  const [latestDtls, setLatestDtls] = useState(null);\r\n  const [gloabalDtls, setGlobalDtls] = useState(null);\r\n  const [gloabalDtlsAll, setGlobalDtlsAll] = useState(null);\r\n  const [countrytDtls, setCountrytDtls] = useState(null);\r\n  const [countryListWithAlpha, setCountryListWithAlpha] = useState([]);\r\n\r\n  useEffect(() => {\r\n    AppServiceApi.getSpecifiedCountryLatestDetails(country3code).then((res) => {\r\n      if(res.data.result) {\r\n        Object.keys(res.data.result).forEach((key) => setLatestDtls(res.data.result[key]));\r\n      }\r\n    });\r\n    AppServiceApi.getSpecifiedCountryDetails(country3code).then((res) => {\r\n      if(res.data.result) {\r\n        setCountrytDtls(res.data.result);\r\n      }\r\n    });\r\n    AppServiceApi.getGlobalDetails().then((res) => {\r\n      if(res.data.result) {\r\n        setGlobalDtls(res.data.result);\r\n      }\r\n    });\r\n    AppServiceApi.getGlobalDetailsAll().then((res) => {\r\n      if(res.data.result) {\r\n        setGlobalDtlsAll(res.data.result);\r\n      }\r\n    });\r\n  }, [country3code])\r\n\r\n  useEffect(() => {\r\n    AppServiceApi.getCountryList().then((res) => {\r\n      if(res.data) {\r\n        setCountryListWithAlpha(res.data);\r\n      }\r\n    });\r\n  },[])\r\n\r\n  const filterList = (e) => {\r\n    setCountry3CodeSearch(e.target.value)\r\n  }\r\n\r\n  const onSelect = (code, countryName) => {\r\n    setCountry3code(code);\r\n    setCountry3CodeSearch(countryName);\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n        <div className=\"row\">\r\n          <div class=\"sidenav\">\r\n          <FormControl sizetype=\"text\" value={country3CodeSearch} placeholder=\"Country Code\" className=\"mr-sm-2\" onChange={filterList}/>\r\n            {country3CodeSearch && countryListWithAlpha && countryListWithAlpha.length > 0 ? \r\n              <CountryList\r\n                countryListWithAlpha={countryListWithAlpha}\r\n                country3CodeSearch={country3CodeSearch}\r\n                onSelect={onSelect}/>\r\n              : null\r\n            } \r\n          </div>\r\n          <div class=\"main\">\r\n            <HeaderBar \r\n              setCountry3code={setCountry3code}\r\n              country3code={country3code} />\r\n            <SpecificCountry\r\n                latestDtls={latestDtls}\r\n                countrytDtls={countrytDtls}\r\n                country3code={country3code} />\r\n              <SpecificCountry\r\n                  latestDtls={gloabalDtls}\r\n                  countrytDtls={gloabalDtlsAll}\r\n                  country3code={'Gobal Count'} />\r\n          </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}