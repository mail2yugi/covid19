{"version":3,"sources":["pages/header/haderBar.js","pages/specificCountry/specificCountry.js","services/appServiceApi.js","App.js","serviceWorker.js","index.js"],"names":["HeaderBar","props","className","Navbar","bg","variant","Brand","href","Nav","Form","inline","FormControl","sizetype","value","country3code","placeholder","onChange","e","target","length","setCountry3code","toUpperCase","Button","onClick","alert","disabled","stateprv","labels","datasets","fill","backgroundColor","borderColor","borderWidth","lineTension","data","SpecificCountry","useState","stateC","setStateC","stateD","setStateD","stateR","setStateR","stateA","setStateA","useEffect","countrytDtls","label","dataC","dataD","dataR","dataA","Object","keys","forEach","key","push","confirmed","deaths","recovered","Card","Header","as","Body","latestDtls","style","width","Title","Text","id","options","scales","xAxes","display","yAxes","legend","position","AppServiceApi","getSpecifiedCountryLatestDetails","countryCode","today","Date","setDate","getDate","date","getFullYear","getMonth","endpoint","axios","getSpecifiedCountryDetails","getGlobalDetails","App","setLatestDtls","setCountrytDtls","then","res","result","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc8e2041.chunk.js","sourcesContent":["import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl'\r\n\r\nconst HeaderBar = (props) => {\r\n\r\n    const onChangeOfCountryCode = (e) => {\r\n        if(e.target.value.length <= 3) {\r\n            props.setCountry3code(e.target.value.toUpperCase());\r\n        } else if(e.target.value.length === 0) {\r\n            props.setCountry3code(e.target.value);\r\n        }\r\n    }\r\n\r\n    const fetchDtls = () => {\r\n        alert('hi');\r\n    }\r\n\r\n    return (\r\n        <div className=\"header-bar\">\r\n            <Navbar bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\">Covid19 Update</Navbar.Brand>\r\n                <Nav className=\"mr-auto\"></Nav>\r\n                <Form inline>\r\n                <FormControl sizetype=\"text\" value={props.country3code} placeholder=\"Country Code\" className=\"mr-sm-2\" onChange={onChangeOfCountryCode}/>\r\n                <Button variant=\"outline-info\" onClick={fetchDtls} disabled={props.country3code.length !== 3}>Fetch Details</Button>\r\n                </Form>\r\n            </Navbar>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default HeaderBar;","import React, {useEffect, useState} from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport {Line} from 'react-chartjs-2';\r\n\r\nconst stateprv = {\r\n    labels: [],\r\n    datasets: [\r\n      {\r\n        fill: true,\r\n        backgroundColor: '#9C27B0',\r\n        borderColor: '#9C27B0',\r\n        borderWidth: 1,\r\n        lineTension: 0.5,\r\n        data: []\r\n      }\r\n    ]\r\n  }\r\n\r\nconst SpecificCountry = (props) => {\r\n    const [stateC, setStateC] = useState(stateprv);\r\n    const [stateD, setStateD] = useState(stateprv);\r\n    const [stateR, setStateR] = useState(stateprv);\r\n    const [stateA, setStateA] = useState(stateprv);\r\n\r\n    useEffect(() => {\r\n        if(props.countrytDtls) {\r\n            let label = [];\r\n            let dataC = [];\r\n            let dataD = [];\r\n            let dataR = [];\r\n            let dataA = [];\r\n            Object.keys(props.countrytDtls).forEach((key) => {\r\n                label.push(key);\r\n                dataC.push(props.countrytDtls[key].confirmed);\r\n                dataD.push(props.countrytDtls[key].deaths);\r\n                dataR.push(props.countrytDtls[key].recovered);\r\n                dataA.push(+props.countrytDtls[key].confirmed - props.countrytDtls[key].deaths - props.countrytDtls[key].recovered);\r\n            })\r\n\r\n            setStateC({\r\n                labels: label,\r\n                datasets : [\r\n                    {\r\n                        fill: true,\r\n                        backgroundColor: '#9C27B0',\r\n                        borderColor: '#9C27B0',\r\n                        borderWidth: 1,\r\n                        lineTension: 0.5,\r\n                        data: dataC\r\n                    }\r\n                ]\r\n            });\r\n\r\n            setStateD({\r\n                labels: label,\r\n                datasets : [\r\n                    {\r\n                        fill: true,\r\n                        backgroundColor: '#9C27B0',\r\n                        borderColor: '#9C27B0',\r\n                        borderWidth: 1,\r\n                        lineTension: 0.5,\r\n                        data: dataD\r\n                    }\r\n                ]\r\n            });\r\n\r\n            setStateR({\r\n                labels: label,\r\n                datasets : [\r\n                    {\r\n                        fill: true,\r\n                        backgroundColor: '#9C27B0',\r\n                        borderColor: '#9C27B0',\r\n                        borderWidth: 1,\r\n                        lineTension: 0.5,\r\n                        data: dataR\r\n                    }\r\n                ]\r\n            });\r\n\r\n            setStateA({\r\n                labels: label,\r\n                datasets : [\r\n                    {\r\n                        fill: true,\r\n                        backgroundColor: '#9C27B0',\r\n                        borderColor: '#9C27B0',\r\n                        borderWidth: 1,\r\n                        lineTension: 0.5,\r\n                        data: dataA\r\n                    }\r\n                ]\r\n            });\r\n        }\r\n    }, [props.countrytDtls])\r\n\r\n    return (\r\n        <div className=\"specific-country\">\r\n            <Card>\r\n                <Card.Header as=\"h5\">{props.country3code}</Card.Header>\r\n                <Card.Body>\r\n                {props.latestDtls ? \r\n                    <div className=\"row\">\r\n                            <div className=\"col-3\">\r\n                                <Card style={{ width: '18rem' }} className=\"bg-warning box-shadow\">\r\n                                    <Card.Body>\r\n                                        <Card.Title>Confirmed</Card.Title>\r\n                                        <Card.Text className=\"count confirmed\">{props.latestDtls.confirmed}</Card.Text>\r\n                                        <div id=\"confirmChart\">\r\n                                        <Line\r\n                                            data={stateC}\r\n                                            options={\r\n                                                {\r\n                                                    scales:{\r\n                                                        xAxes: [{\r\n                                                            display: false //this will remove all the x-axis grid lines\r\n                                                        }],\r\n                                                        yAxes: [{\r\n                                                            display: false //this will remove all the x-axis grid lines\r\n                                                        }]\r\n                                                    },\r\n                                                    legend:{\r\n                                                    display:false,\r\n                                                    position:'right'\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                            />\r\n                                        </div>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <Card style={{ width: '18rem' }} className=\"bg-danger box-shadow\">\r\n                                    <Card.Body>\r\n                                        <Card.Title>Death</Card.Title>\r\n                                        <Card.Text className=\"count death\">{props.latestDtls.deaths}</Card.Text>\r\n                                        <div id=\"deathChart\">\r\n                                            <Line\r\n                                                data={stateD}\r\n                                                options={\r\n                                                    {\r\n                                                        legend:{\r\n                                                            display:false,\r\n                                                            position:'right'\r\n                                                        },\r\n                                                        scales:{\r\n                                                            xAxes: [{\r\n                                                                display: false //this will remove all the x-axis grid lines\r\n                                                            }],\r\n                                                            yAxes: [{\r\n                                                                display: false //this will remove all the x-axis grid lines\r\n                                                            }]\r\n                                                        }\r\n                                                    }\r\n                                                }/>\r\n                                        </div>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <Card style={{ width: '18rem' }} className=\"bg-success box-shadow\">\r\n                                    <Card.Body>\r\n                                        <Card.Title>Recovered</Card.Title>\r\n                                        <Card.Text className=\"count recover\">{props.latestDtls.recovered}</Card.Text>\r\n                                        <div id=\"recoverChart\">\r\n                                            <Line\r\n                                                data={stateR}\r\n                                                options={\r\n                                                    {\r\n                                                        legend:{\r\n                                                            display:false,\r\n                                                            position:'right'\r\n                                                        },\r\n                                                        scales:{\r\n                                                            xAxes: [{\r\n                                                                display: false //this will remove all the x-axis grid lines\r\n                                                            }],\r\n                                                            yAxes: [{\r\n                                                                display: false //this will remove all the x-axis grid lines\r\n                                                            }]\r\n                                                        },\r\n                                                    }\r\n                                                }/>\r\n                                        </div>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                            <div className=\"col-3\">\r\n                                <Card style={{ width: '18rem' }} className=\"bg-secondary box-shadow\">\r\n                                    <Card.Body>\r\n                                        <Card.Title>Active</Card.Title>\r\n                                        <Card.Text className=\"count active\">{+props.latestDtls.confirmed - props.latestDtls.deaths - props.latestDtls.recovered}</Card.Text>\r\n                                        <div id=\"activeChart\">\r\n                                            <Line\r\n                                                data={stateA}\r\n                                                options={\r\n                                                    {\r\n                                                        legend:{\r\n                                                            display:false,\r\n                                                            position:'right'\r\n                                                        },\r\n                                                        scales:{\r\n                                                            xAxes: [{\r\n                                                                display: false //this will remove all the x-axis grid lines\r\n                                                            }],\r\n                                                            yAxes: [{\r\n                                                                display: false //this will remove all the x-axis grid lines\r\n                                                            }]\r\n                                                        },\r\n                                                    }\r\n                                                }/>\r\n                                        </div>\r\n                                    </Card.Body>\r\n                                </Card>\r\n                            </div>\r\n                     </div>\r\n                    : null }\r\n                </Card.Body>\r\n            </Card>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SpecificCountry;","import axios from 'axios';\r\n\r\nvar AppServiceApi = {\r\n\r\n    getSpecifiedCountryLatestDetails: (countryCode) => {\r\n        let today = new Date();\r\n        today.setDate(today.getDate() - 1);\r\n        let date = `${today.getFullYear()}-0${today.getMonth() + 1}-${today.getDate()}`;\r\n        let endpoint = `https://covidapi.info/api/v1/country/${countryCode}/${date}`\r\n        return axios(endpoint)\r\n    },\r\n\r\n    getSpecifiedCountryDetails: (countryCode) => {\r\n        let endpoint = `https://covidapi.info/api/v1/country/${countryCode}`\r\n        return axios(endpoint)\r\n    },\r\n\r\n    getGlobalDetails: (countryCode) => {\r\n        let endpoint = `https://covidapi.info/api/v1/country/${countryCode}`\r\n        return axios(endpoint)\r\n    },\r\n};\r\n\r\nexport default AppServiceApi;","import React, { useState, useEffect } from 'react';\r\nimport './App.scss';\r\nimport HeaderBar from './pages/header/haderBar';\r\nimport SpecificCountry from './pages/specificCountry/specificCountry';\r\nimport AppServiceApi from './services/appServiceApi'\r\n\r\nconst App = (props) => {\r\n  const [country3code, setCountry3code] = useState(\"IND\");\r\n  const [latestDtls, setLatestDtls] = useState(null);\r\n  const [countrytDtls, setCountrytDtls] = useState(null);\r\n\r\n  useEffect(() => {\r\n    AppServiceApi.getSpecifiedCountryLatestDetails(country3code).then((res) => {\r\n      if(res.data.result) {\r\n        Object.keys(res.data.result).forEach((key) => setLatestDtls(res.data.result[key]));\r\n      }\r\n    });\r\n    AppServiceApi.getSpecifiedCountryDetails(country3code).then((res) => {\r\n      if(res.data.result) {\r\n        setCountrytDtls(res.data.result);\r\n      }\r\n    });\r\n  }, [country3code])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <HeaderBar \r\n        setCountry3code={setCountry3code}\r\n        country3code={country3code} />\r\n      <SpecificCountry\r\n        latestDtls={latestDtls}\r\n        countrytDtls={countrytDtls}\r\n        country3code={country3code} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}